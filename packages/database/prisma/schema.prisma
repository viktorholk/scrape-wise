// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum JobStatus {
  STARTED
  COMPLETED
  STOPPED
  ERROR
}

enum TemplateType {
  TABLE
  BAR_CHART
  LIST_VIEW
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  firstName String?
  lastName  String?

  password String

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  crawlerJobs CrawlerJob[]
  analyserJobs AnalyserJob[]
  templates     Template[]
}

model CrawlerJob {
  id         Int              @id @default(autoincrement())
  userId     Int
  user       User             @relation(fields: [userId], references: [id])
  initialUrl String
  crawlDepth Int
  pageLimit  Int
  status     JobStatus @default(STARTED)
  pages Json?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  analyserJobs AnalyserJob[]

  @@index([userId])
}

model AnalyserJob {
  id         Int              @id @default(autoincrement())
  userId     Int
  user       User             @relation(fields: [userId], references: [id])
  crawlerJobId     Int
  crawlerJob       CrawlerJob @relation(fields: [crawlerJobId], references: [id]) 
  template     Template?   

  prompt String

  status     JobStatus @default(STARTED)
  results    Json?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@index([userId])
}

model Template {
  id           Int          @id @default(autoincrement())
  name         String
  content      String
  type         TemplateType @default(TABLE)
  dynamic      Boolean
  index        Int?

  analyserJobId   Int         @unique
  analyserJob     AnalyserJob    @relation(fields: [analyserJobId], references: [id])
  userId          Int     @unique
  user            User    @relation(fields: [userId], references: [id])

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Recipe {
  id              Int      @id @default(autoincrement())
  name            String
  description     String?
  rating          Float?
  categories      String[]
  prepTimeMinutes Int?
  cookTimeMinutes Int?
  servings        Int?
  ingredients     Json // Store as { "name": "flour", "quantity": 2, "unit": "cups" }
  instructions    String[]
  notes           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

