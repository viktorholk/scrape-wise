// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum JobStatus {
  STARTED
  COMPLETED
  STOPPED
  ERROR
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  firstName String?
  lastName  String?

  password String

  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  crawlerJobs      CrawlerJob[]
  analyserJobs     AnalyserJob[]
  scheduledAnalysisJobs ScheduledAnalysisJob[]
}

model CrawlerJob {
  id         Int       @id @default(autoincrement())
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  initialUrl String
  crawlDepth Int
  pageLimit  Int
  status     JobStatus @default(STARTED)
  pages      Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  analyserJobs      AnalyserJob[]

  templateForScheduledAnalyses ScheduledAnalysisJob[] @relation("ScheduledBasedOnCrawlerJob")

  @@index([userId])
}

model AnalyserJob {
  id           Int        @id @default(autoincrement())
  userId       Int
  user         User       @relation(fields: [userId], references: [id])

   crawlerJobId Int 
  crawlerJob   CrawlerJob @relation(fields: [crawlerJobId], references: [id], onDelete: Cascade) 

  prompt String

  status            JobStatus          @default(STARTED)
  results           Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  createdByScheduledAnalysisId Int?
  createdByScheduledAnalysis   ScheduledAnalysisJob? @relation("RunsForSchedule", fields: [createdByScheduledAnalysisId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([crawlerJobId])
  @@index([createdByScheduledAnalysisId])
}

model ScheduledAnalysisJob {
  id    Int    @id @default(autoincrement())
  name  String
  enabled Boolean @default(true)
  index Int? // organize in frontend

  originalCrawlerJobId  Int
  originalCrawlerJob    CrawlerJob @relation("ScheduledBasedOnCrawlerJob", fields: [originalCrawlerJobId], references: [id], onDelete: Restrict)

  prompt String

  cronExpression String
  lastRun DateTime?
  nextRun DateTime?
  lastRunStatus JobStatus? 

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  analyserJobRuns AnalyserJob[] @relation("RunsForSchedule")

  @@index([userId, enabled])
}

model Recipe {
  id              Int      @id @default(autoincrement())
  name            String
  description     String?
  rating          Float?
  categories      String[]
  prepTimeMinutes Int?
  cookTimeMinutes Int?
  servings        Int?
  instructions    String[]
  notes           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
